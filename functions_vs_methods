3.4.7 Functions vs. methods
A method is a specific kind of function ‒ it behaves like a function and looks like a function, but differs in the way in which it acts, and in its invocation style.

A function doesn't belong to any data ‒ it gets data, it may create new data and it (generally) produces a result.

A method does all these things, but is also able to change the state of a selected entity.

A method is owned by the data it works for, while a function is owned by the whole code.

This also means that invoking a method requires some specification of the data from which the method is invoked.

It may sound puzzling here, but we'll deal with it in depth when we delve into object-oriented programming.


In general, a typical function invocation may look like this:

result = function(arg)
 
The function takes an argument, does something, and returns a result.

A typical method invocation usually looks like this:

result = data.method(arg)
 
Note: the name of the method is preceded by the name of the data which owns the method. Next, you add a dot, followed by the method name, and a pair of parenthesis enclosing the arguments.

The method will behave like a function, but can do something more ‒ it can change the internal state of the data from which it has been invoked.

You may ask: why are we talking about methods, not about lists?

This is an essential issue right now, as we're going to show you how to add new elements to an existing list. This can be done with methods owned by all the lists, not by functions.
3.4.8 Adding elements to a list: append() and insert()
A new element may be glued to the end of the existing list:

list.append(value)
 
Such an operation is performed by a method named append(). It takes its argument's value and puts it at the end of the list which owns the method.

The list's length then increases by one.

The insert() method is a bit smarter ‒ it can add a new element at any place in the list, not only at the end.

list.insert(location, value)
 
It takes two arguments:

the first shows the required location of the element to be inserted; note: all the existing elements that occupy locations to the right of the new element (including the one at the indicated position) are shifted to the right, in order to make space for the new element;
the second is the element to be inserted.
Look at the code in the editor. See how we use the append() and insert() methods. Pay attention to what happens after using insert(): the former first element is now the second, the second the third, and so on
You can start a list's life by making it empty (this is done with an empty pair of square brackets) and then adding new elements to it as needed.

Take a look at the snippet in the editor. Try to guess its output after the for loop execution. Run the program to check if you were right.
my_list = []  # Creating an empty list.

for i in range(5):
    my_list.append(i + 1)

print(my_list)


First aspect of for loop in lists
my_list = [10, 1, 8, 3, 5]
total = 0

for i in range(len(my_list)):
    total += my_list[i]

print(total)
Let's assume that you want to calculate the sum of all the values stored in the my_list list.

You need a variable whose sum will be stored and initially assigned a value of 0 ‒ its name will be total. (Note: we're not going to name it sum as Python uses the same name for one of its built-in functions: sum(). Using the same name would generally be considered bad practice.) Then you add to it all the elements of the list using the for loop. Take a look at the snippet in the editor.

Let's comment on this example:

the list is assigned a sequence of five integer values;
the i variable takes the values 0, 1, 2, 3, and 4, and then it indexes the list, selecting the subsequent elements: the first, second, third, fourth and fifth;
each of these elements is added together by the += operator to the total variable, giving the final result at the end of the loop;
note the way in which the len() function has been employed ‒ it makes the code independent of any possible changes in the list's contents

Second aspects of for loop in lists
The second aspect of the for loop
But the for loop can do much more. It can hide all the actions connected to the list's indexing, and deliver all the list's elements in a handy way.

This modified snippet shows how it works:


my_list = [10, 1, 8, 3, 5]
total = 0
 
for i in my_list:
    total += i
 
print(total)
What happens here?

the for instruction specifies the variable used to browse the list (i here) followed by the in keyword and the name of the list being processed (my_list here)
the i variable is assigned the values of all the subsequent list's elements, and the process occurs as many times as there are elements in the list;
this means that you use the i variable as a copy of the elements' values, and you don't need to use indices;
the len() function is not needed here, either.
3.4.10 Lists in action
Let's leave lists aside for a short moment and look at one intriguing issue.

Imagine that you need to rearrange the elements of a list, i.e., reverse the order of the elements: the first and the fifth as well as the second and fourth elements will be swapped. The third one will remain untouched.

Question: how can you swap the values of two variables?

Take a look at the snippet:


variable_1 = 1
variable_2 = 2
 
variable_2 = variable_1
variable_1 = variable_2
 
If you do something like this, you would lose the value previously stored in variable_2. Changing the order of the assignments will not help. You need a third variable that serves as an auxiliary storage.

This is how you can do it:


variable_1 = 1
variable_2 = 2
 
auxiliary = variable_1
variable_1 = variable_2
variable_2 = auxiliary
 
Python offers a more convenient way of doing the swap – take a look:


variable_1 = 1
variable_2 = 2
 
variable_1, variable_2 = variable_2, variable_1
 
Clear, effective and elegant - isn't it?
Now you can easily swap the list's elements to reverse their order:


my_list = [10, 1, 8, 3, 5]
 
my_list[0], my_list[4] = my_list[4], my_list[0]
my_list[1], my_list[3] = my_list[3], my_list[1]
 
print(my_list)

Now you can easily swap the list's elements to reverse their order:


my_list = [10, 1, 8, 3, 5]
 
my_list[0], my_list[4] = my_list[4], my_list[0]
my_list[1], my_list[3] = my_list[3], my_list[1]
 
print(my_list)
It looks fine with five elements.

Will it still be acceptable with a list containing 100 elements? No, it won't.

Can you use the for loop to do the same thing automatically, irrespective of the list's length? Yes, you can.

This is how we've done it:


for i in range(length // 2):
    my_list[i], my_list[length - i - 1] = my_list[length - i - 1], my_list[i]
 
print(my_list)
 
Note:

we've assigned the length variable with the current list's length (this makes our code a bit clearer and shorter)
we've launched the for loop to run through its body length // 2 times (this works well for lists with both even and odd lengths, because when the list contains an odd number of elements, the middle one remains untouched)
we've swapped the ith element (from the beginning of the list) with the one with an index equal to (length - i - 1) (from the end of the list); in our example, for i equal to 0 the (length - i - 1) gives 4; for i equal to 1, it gives 3 ‒ this is exactly what we needed.
Lists are extremely useful, and you'll encounter them very often.

